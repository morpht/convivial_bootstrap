<?php

/**
 * @file
 * Convivial bootstrap main theme file.
 */

use Drupal\block\Entity\Block;
use Drupal\Component\Utility\Html;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
use Drupal\layout_builder\SectionStorageInterface;
use Drupal\media\Entity\Media;

/**
 * Implements hook_theme().
 */
function convivial_bootstrap_theme() {
  return [
    'calendar_item_date' => [
      'variables' => [
        'datetime' => NULL,
      ],
      'template' => 'calendar-item/calendar-item-date',
    ],
  ];
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function convivial_bootstrap_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  require_once __DIR__ . '/includes/_settings.inc';
  _convivial_bootstrap_settings($form, $form_state);
  require_once __DIR__ . '/includes/matomo.inc';
  _convivial_bootstrap_matomo_theme_settings($form, $form_state);
}

/**
 * Implements template_preprocess_html().
 */
function convivial_bootstrap_preprocess_html(&$variables) {
  $theme_settings_mappings = [
    'search_form_display' => [
      'theme__search-form--inline' => 'search-form--inline',
      'theme__search-form--inline-reveal' => 'search-form--inline-reveal',
      'theme__search-form--top-reveal' => 'search-form--top-reveal',
      'theme__search-form--bottom-reveal' => 'search-form--bottom-reveal',
    ],
  ];
  _convivial_bootstrap_theme_settings_mappings($variables, $theme_settings_mappings);

  $route_match = \Drupal::routeMatch();
  $parameters = $route_match->getParameters();

  /** @var \Drupal\node\Entity\Node $node */
  $node = $parameters->get('node');
  // Only on node entity.
  if (is_object($node)) {

    // Only if the field_hero_darkness exists.
    if ($node->hasField('field_hero_darkness')) {
      if (!$node->get('field_hero_darkness')->isEmpty()) {
        // Provide a class for body.
        $variables['attributes']['class'][] = 'page__header--transparent';
        $class = $node->get('field_hero_darkness')->value;
        $variables['attributes']['class'][] = $class;
      }
    }
  }

  // Attach Look and Feel feature if enabled.
  if (theme_get_setting('laf_enable')) {
    require_once __DIR__ . '/includes/laf.inc';
    _convivial_bootstrap_laf($variables);
  }

  // Add user role to body tag.
  foreach ($variables['user']->getRoles() as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }

  // Add structured data attributes to <html>.
  // @see https://developers.google.com/search/docs/advanced/structured-data/faqpage
  $html_item_types = &drupal_static('convivial_bootstrap_html_item_types', []);
  if (!empty($html_item_types)) {
    $variables['html_attributes']['itemscope'] = '';
    $variables['html_attributes']['itemtype'] = implode(' ', $html_item_types);
  }
}

/**
 * Implements template_preprocess_page().
 */
function convivial_bootstrap_preprocess_page(&$variables) {
  $theme_settings_mappings = [
    'header_layout' => [
      'theme__inline_menu' => 'bs-header--inline-menu',
      'theme__menu_bar' => 'bs-header--menu-bar',
      'theme__no_header' => 'bs-header--no-header',
    ],
    'top_bar_style' => [
      'theme__top_bar--light' => 'bg-light',
      'theme__top_bar--dark' => 'bg-dark',
      'theme__top_bar--primary' => 'bg-primary',
      'theme__top_bar--primary-dark' => 'bg-primary-dark',
    ],
    'header_style' => [
      'theme__header--light' => 'bg-light',
      'theme__header--dark' => 'bg-dark',
      'theme__header--primary' => 'bg-primary',
      'theme__header--primary-dark' => 'bg-primary-dark',
    ],
    'header_stickiness' => [
      'theme__header--non-sticky' => 'bs-header--non-sticky',
      'theme__header--sticky' => 'bs-header--sticky',
    ],
    'header_width' => [
      'theme__header--fluid' => 'bs-header--fluid',
      'theme__header--contained' => 'bs-header--contained',
    ],
    'postscript_style' => [
      'theme__postscript--light' => 'bg-light',
      'theme__postscript--dark' => 'bg-dark',
      'theme__postscript--primary' => 'bg-primary',
      'theme__postscript--primary-dark' => 'bg-primary-dark',
    ],
    'footer_style' => [
      'theme__footer--light' => 'bg-light',
      'theme__footer--dark' => 'bg-dark',
      'theme__footer--primary' => 'bg-primary',
      'theme__footer--primary-dark' => 'bg-primary-dark',
    ],
    'footer_information_style' => [
      'theme__footer_information--light' => 'bg-light',
      'theme__footer_information--dark' => 'bg-dark',
      'theme__footer_information--primary' => 'bg-primary',
      'theme__footer_information--primary-dark' => 'bg-primary-dark',
    ],
    'theme__highlighted_layouts' => [
      1 => 'highlighted-layouts',
    ],
  ];
  _convivial_bootstrap_theme_settings_mappings($variables, $theme_settings_mappings);

  // Set header_transparency variable renderable in page template.
  if (theme_get_setting('appearance') === 'theme__header--transparent') {
    $variables['header_transparency'] = TRUE;
  }

  $route_match = \Drupal::routeMatch();
  $parameters = $route_match->getParameters();

  // Set flag saying if current page is using Layout Builder.
  if ($parameters->get('section_storage') instanceof SectionStorageInterface) {
    $variables['has_layout_builder'] = TRUE;
  }
  else {
    $pattern = '/^entity\.([^.]+)\.(canonical|latest_version)$/';
    preg_match($pattern, $route_match->getRouteName(), $matches);
    if (!empty($matches[1])) {
      $entity = $parameters->get($matches[1]);
      if ($entity instanceof FieldableEntityInterface) {
        $display = \Drupal::entityTypeManager()
          ->getStorage('entity_view_display')
          ->load($entity->getEntityTypeId() . '.' . $entity->bundle() . '.full');
        if ($display instanceof LayoutEntityDisplayInterface && $display->isLayoutBuilderEnabled()) {
          $variables['has_layout_builder'] = TRUE;
        }
      }
    }
  }

  /** @var \Drupal\node\Entity\Node $node */
  $node = $parameters->get('node');
  // Only on node entity.
  if (is_object($node)) {

    // Only on node entity and if the field exists.
    if ($node->hasField('field_hero_darkness')) {
      // Attach all field values as classes.
      $class = $node->get('field_hero_darkness')->value;
      $variables['hero_darkness'] = $class;
    }

    // Only if the field_hide exists.
    if ($node->hasField('field_hide')) {
      // Attach all field values as classes.
      foreach ($node->get('field_hide')->getValue() as $item) {
        $variables['attributes']['class'][] = trim($item['value']);
      }
    }
  }

  // Attach the library mark_external_links.
  $variables['mark_external_links'] = theme_get_setting('mark_external_links');
  if (isset($variables['mark_external_links'])) {
    $variables['#attached']['library'][] = 'convivial_bootstrap/mark-external-links';
  }

  // Get Matomo settings and initialize Matomo script.
  require_once __DIR__ . '/includes/matomo.inc';
  _convivial_bootstrap_matomo_tracking_script($variables);
}

/**
 * Implements hook_page_attachments_alter().
 */
function convivial_bootstrap_page_attachments_alter(array &$attachments) {
  // Attach Meta behavior if enabled.
  if (theme_get_setting('meta.meta_enable')) {
    require_once __DIR__ . '/includes/meta.inc';
    _convivial_bootstrap_meta($attachments);
  }
}

/**
 * Implements template_preprocess_layout().
 */
function convivial_bootstrap_preprocess_layout(&$variables) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $layout */
  $layout = $variables['layout'];
  $layout_id = $layout->id();

  // @see convivial_layouts_entity_view_alter()
  $entity = $variables['content']['#entity'] ?? NULL;

  if (empty($variables['header_colour_classes'])) {
    $theme_settings_mappings = [
      'header_section_style' => [
        'theme__node_header_section--standard' => 'cp cp--standard',
        'theme__node_header_section--light' => 'cp cp--light',
        'theme__node_header_section--dark' => 'cp cp--dark',
        'theme__node_header_section--primary' => 'cp cp--primary',
        'theme__node_header_section--primary-dark' => 'cp cp--primary-dark',
      ],
    ];
    _convivial_bootstrap_theme_settings_mappings($variables, $theme_settings_mappings);
  }

  // Replace calendar item date field content by custom template.
  if ($layout_id === 'calendar_item') {
    if (isset($variables['content']['date'])) {
      foreach (Element::children($variables['content']['date']) as $name) {
        $block = &$variables['content']['date'][$name];
        if (!empty($block['content'][0]['#field_name']) && $entity && $entity->get($block['content'][0]['#field_name'])) {
          $field = $entity->get($block['content'][0]['#field_name']);
          $timestamp = NULL;

          switch ($block['content'][0]['#field_type']) {
            case 'datetime':
            case 'daterange':
              $timestamp = strtotime($field->value);
              break;

            case 'timestamp':
            case 'created':
            case 'changed':
              $timestamp = $field->value;
              break;
          }

          if (!empty($timestamp)) {
            $datetime = new DrupalDateTime();
            $datetime->setTimestamp($timestamp + $datetime->getOffset());
            $block['content'][0] = [
              '#theme' => 'calendar_item_date',
              '#datetime' => $datetime,
              '#attached' => [
                'library' => [
                  'convivial_bootstrap/calendar-item',
                ],
              ],
            ];
          }
        }
      }
    }
  }

  // Add URL for item heading field. See convivial_bootstrap_preprocess_field().
  elseif (in_array($layout_id, [
    'search',
    'stack_detail',
    'stack_simple',
    'summary',
    'teaser',
    'teaser_big',
    'teaser_small',
    'title',
  ]) && !empty($entity)
  ) {
    $clickable = FALSE;

    if (isset($variables['content']['title'])) {
      foreach (Element::children($variables['content']['title']) as $name) {
        $block = &$variables['content']['title'][$name];

        // Check if item is linked to some URL.
        if (array_key_exists('content', $block) && isset($block['content'][0])) {
          if (array_key_exists('#field_name', $block['content'][0])) {
            if ($block['content'][0]['#field_name'] === 'field_heading') {
              $item = NULL;
              // Only if URL field is available.
              if ($entity->id() !== NULL && $entity->hasField('field_item_url')) {
                $item = $entity->get('field_item_url')->first();
              }
              if (!empty($item)) {
                $block['content'][0]['#item_url'] = $item->getUrl();
                $clickable = TRUE;
              }
            }

            // Check if node title is linked to entity.
            elseif ($block['content'][0]['#field_name'] === 'title'
              && !empty($block['#configuration']['formatter']['settings']['link_to_entity'])
            ) {
              $clickable = TRUE;
            }
          }
        }
      }
    }

    // Add classes to the stack layout.
    if ($layout_id === 'stack_detail' || $layout_id === 'stack_simple') {

      // Add class only if entity is clickable.
      if ($clickable) {
        $variables['attributes']['class'][] = 'card--clickable';
      }
    }
  }

  // Add URL for specific layouts.
  elseif (in_array($layout_id, [
    'icon',
    'img',
    'tile',
  ]) && !empty($entity)
  ) {
    $item = NULL;
    // Only if URL field is available.
    if ($entity->id() !== NULL && $entity->hasField('field_item_url')) {
      $item = $entity->get('field_item_url')->first();
    }
    // Use link field value if available.
    if (!empty($item)) {
      $variables['item_url'] = $item->getUrl();
    }
    // Use entity full page if available.
    elseif (!$entity->isNew() && $entity->hasLinkTemplate('canonical')) {
      $variables['item_url'] = $entity->toUrl();
    }

    // Set icon layout variables.
    if ($layout_id === 'icon') {
      // Flag when link found in summary.
      $summary = $entity->get('field_item_summary');
      $summary_has_link = FALSE;
      if (!$summary->isEmpty() && strpos($summary->first()
        ->getString(), '<a href=') !== FALSE) {
        $summary_has_link = TRUE;
      }
      // Remove link if summary has links.
      if ($summary_has_link) {
        $variables['item_url'] = NULL;
      }

      // Get background values from entity.
      $variables['bg_colour'] = $entity->get('field_item_icon_bg_colour')->value;
      $variables['bg_is_dark'] = $entity->get('field_item_icon_bg_is_dark')->value;

      // Get image URL from referenced media.
      $referenced_entities = $entity->get('field_item_image')
        ->referencedEntities();
      $media = array_pop($referenced_entities);
      if (!empty($media)) {
        $url = _convivial_bootstrap_get_file_url($media, 'field_media_image');
        $variables['bg_image'] = $url;
      }

      // Get ratio value from theme settings.
      $ratio = theme_get_setting('icon_aspect_ratio');
      // Set a default value if one doesn't exist.
      $ratio = !empty($ratio) ? $ratio : 1.414;
      // Ratio calculation.
      $variables['icon_ratio'] = 1 / $ratio * 100;
    }
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 */
function convivial_bootstrap_plugin_filter_layout__layout_builder_alter(array &$definitions, array $extra) {
  /** @var \Drupal\Core\Layout\LayoutDefinition $definition */
  foreach ($definitions as $key => $definition) {
    // Disable other than this module layouts.
    if ($definition->getProvider() !== 'convivial_layouts') {
      unset($definitions[$key]);
    }
  }
}

/**
 * Implements template_preprocess_block().
 */
function convivial_bootstrap_preprocess_block(&$variables) {
  $theme_settings_mappings = [
    'megamenu_columns' => [
      'theme__megamenu-columns--2' => 'megamenu--columns-2',
      'theme__megamenu-columns--3' => 'megamenu--columns-3',
      'theme__megamenu-columns--4' => 'megamenu--columns-4',
      'theme__megamenu-columns--5' => 'megamenu--columns-5',
      'theme__megamenu-columns--6' => 'megamenu--columns-6',
    ],
  ];
  _convivial_bootstrap_theme_settings_mappings($variables, $theme_settings_mappings);

  // Avoid facet to be hidden in layout buider UI.
  if($variables['base_plugin_id'] == 'facet_block' && _convivial_bootstrap_is_in_layout_builder_ui()) {
    if (($key = array_search('hidden', $variables['attributes']['class'])) !== false) {
      unset($variables['attributes']['class'][$key]);
    }
  }

  if (isset($variables['elements']['content']['#block_content'])) {
    $entity = $variables['elements']['content']['#block_content'];
    $bundle = $entity->bundle();

    // Add bundle class.
    $variables['attributes']['class'][] = Html::getClass('block-bundle-' . $bundle);

    // Preprocess specific blocks.
    switch ($entity->bundle()) {

      case 'logo':
        require_once __DIR__ . '/includes/logo.inc';
        _convivial_bootstrap_logo($variables, $entity);
        break;

      case 'personified_data':
        $variables['theme_path'] = \Drupal::service('extension.list.theme')->getPath('convivial_bootstrap');
        require_once __DIR__ . '/includes/personified_data.inc';
        _convivial_bootstrap_personified_data($variables, $variables['content']['#block_content']);
        break;
    }

    // Add class to hide block heading if enabled.
    require_once __DIR__ . '/includes/hide.inc';
    _convivial_bootstrap_hide_heading($entity, $variables, 'attributes');
  }

  // Add a region variable to a block.
  if (isset($variables['elements']['#id'])) {
    $block_id = $variables['elements']['#id'];
    $block = Block::load($block_id);

    if ($block) {
      $variables['content']['#attributes']['region'] = $block->getRegion();
    }
  }

  // Entity Class Formatter fix.
  // @see https://www.drupal.org/project/entity_class_formatter/issues/3108054
  // Fix missing attributes for Layout Builder inline blocks.
  if (in_array($variables['base_plugin_id'], ['block_content', 'inline_block'])
    && !empty($variables['content']['#attributes'])) {
    // Clone orphaned values to proper destination.
    $attributes = $variables['content']['#attributes'];
    $variables['attributes'] = array_merge_recursive($variables['attributes'], $attributes);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function convivial_bootstrap_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestion for layout builder.
  if (isset($variables['elements']['#configuration']['provider']) && $variables['elements']['#configuration']['provider'] === 'layout_builder') {
    if (isset($variables['elements']['content'][0]['#field_name'])) {
      $field_name = $variables['elements']['content'][0]['#field_name'];
      $suggestions[] = $variables['theme_hook_original'] . '__layout_builder__' . $field_name;
    }
  }

  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
  // Prepare theme suggestion for system menu block
  // according to theme settings and region.
  if (isset($variables['elements']['#id']) && $variables["elements"]["#base_plugin_id"] === 'system_menu_block') {
    $block = Block::load($variables['elements']['#id']);
    $menu_style = theme_get_setting('menu_style');
    // If no menu style is selected or header_layout is set to inline menu
    // in theme settings we provide the default.
    if (empty($menu_style) || (theme_get_setting('header_layout') === 'theme__inline_menu')) {
      $menu_style = 'theme__menu-style--default';
    }
    $menu_style_name = str_replace('theme__menu-style--', '', $menu_style);
    $suggestions[] = $variables['theme_hook_original']
      . '__system_menu_block__' . $menu_style_name;
    $suggestions[] = $variables['theme_hook_original']
      . '__system_menu_block__' . $menu_style_name . '__' . $block->getRegion();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter()
 */
function convivial_bootstrap_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  // Prepare theme suggestion for a field according to the view mode.
  if (isset($element['#third_party_settings']['layout_builder']['view_mode'])) {
    $suggestions[] = 'field__' . $element['#entity_type'] . '__'
      . $element['#field_name'] . '__'
      . $element['#third_party_settings']['layout_builder']['view_mode'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for paragraph.
 */
function convivial_bootstrap_theme_suggestions_paragraph_alter(&$suggestions, $variables) {
  $paragraph = $variables['elements']['#paragraph'];

  if ($paragraph->bundle() === 'section') {
    if ($paragraph->hasField('field_s_layout_classes')) {
      $layout_classes = $paragraph->get('field_s_layout_classes')->value;

      if ($layout_classes && strpos($layout_classes, 'section-layout--wipe')) {
        $suggestions[] = 'paragraph__section__wipe';
      }
    }
  }
}

/**
 * Implements template_preprocess_form().
 */
function convivial_bootstrap_preprocess_form(&$variables) {
  $variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements template_preprocess_menu().
 */
function convivial_bootstrap_preprocess_menu(&$variables) {
  if (!empty($variables['items'])) {
    // Find the active link and apply a flag.
    $current_path = \Drupal::request()->getRequestUri();
    _convivial_bootstrap_theme_find_active_link($variables['items'], $current_path);

    // Find the parent link (for menus starting at > depth 2).
    $items_arr = array_values($variables['items']);
    if (!empty($items_arr)) {
      $parent_link_id = $items_arr[0]['original_link']->getParent();
      if ($parent_link_id !== '') {
        $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
        $parent_link = $menu_link_manager->createInstance($parent_link_id);
        $parent_title = $parent_link->getTitle();
        $parent_url = $parent_link->getUrlObject();
        $variables['parent_link'] = [
          'title' => $parent_title,
          'url' => $parent_url,
        ];
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_menu_alter().
 */
function convivial_bootstrap_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = $variables['theme_hook_original'] . '__' . $variables['attributes']['region'];
  }

  // Prepare theme suggestion for menu according to theme settings.
  $menu_style = theme_get_setting('menu_style');
  // If no menu style is selected or header_layout is set to inline menu
  // in theme settings we provide the default.
  if (empty($menu_style) || (theme_get_setting('header_layout') === 'theme__inline_menu')) {
    $menu_style = 'theme__menu-style--default';
  }
  if ($menu_style && (isset($variables['attributes']['region']))) {
    $menu_style_name = str_replace('theme__menu-style--', '', $menu_style);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $menu_style_name;
    $suggestions[] = $variables['theme_hook_original'] . '__' . $menu_style_name . '__' . $variables['attributes']['region'];
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function convivial_bootstrap_preprocess_paragraph(&$variables) {
  // Attach common paragraph features.
  _convivial_bootstrap_attach_paragraph_features($variables['paragraph'], $variables, 'attributes');

  // Add class to hide paragraph heading if enabled.
  require_once __DIR__ . '/includes/hide.inc';
  _convivial_bootstrap_hide_heading($variables['paragraph'], $variables, 'attributes');

  // Add structured data attributes.
  require_once __DIR__ . '/includes/structured_data.inc';
  _convivial_bootstrap_attach_structured_data($variables['paragraph'], $variables, 'attributes');

  switch ($variables["paragraph"]->getType()) {
    case "animation":
      // Load the configuration for animation.
      $delay = $variables["paragraph"]->get('field_animation_delay')->getValue();
      $repeat = $variables["paragraph"]->get('field_animation_repeat')->getValue();
      $paragraphId = $variables["paragraph"]->id();

      // Retrieve the media image entities associated with the paragraph field.
      $mediaImages = $variables['paragraph']->get('field_animation_images')->referencedEntities();

      $imagePaths = [];

      foreach ($mediaImages as $media) {
        $imageField = $media->get('field_media_image');
        $imageFileEntity = $imageField->entity;
        $imageUri = $imageFileEntity->getFileUri();
        $imagePaths[] = \Drupal::service('file_url_generator')->generateString($imageUri);
      }

      // Set the value in DrupalSettings for use in JavaScript.
      if ($delay) {
        $variables['#attached']['drupalSettings']['animation'][$paragraphId]['delay'] = (int) reset($delay)['value'];
      }
      if ($repeat) {
        $variables['#attached']['drupalSettings']['animation'][$paragraphId]['repeat'] = (int) reset($repeat)['value'];
      }
      if ($imagePaths) {
        $variables['#attached']['drupalSettings']['animation'][$paragraphId]['imagePaths'] = $imagePaths;
      }
      break;
  }
}

/**
 * Implements template_preprocess_paragraph__decision_tree().
 */
function convivial_bootstrap_preprocess_paragraph__decision_tree(&$variables) {
  $variables['#attached']['library'][] = 'convivial_bootstrap/decision_tree_library';
}

/**
 * Implements template_preprocess_paragraph__geochart().
 */
function convivial_bootstrap_preprocess_paragraph__geochart(&$variables) {
  require_once __DIR__ . '/includes/geochart.inc';
  _convivial_bootstrap_geochart($variables);
}

/**
 * Implements hook_preprocess_paragraph() for section.
 */
function convivial_bootstrap_preprocess_paragraph__section(&$variables) {
  $paragraph = $variables['paragraph'];

  if ($paragraph->hasField('field_s_layout_classes')) {
    $classes = $paragraph->get('field_s_layout_classes')->value;

    if ($classes && strpos($classes, 'section-layout--wipe')) {
      $variables['#attached']['library'][] = 'convivial_bootstrap/convivial_wipe';
    }
  }
}

/**
 * Implements template_preprocess_paragraph__timeline().
 */
function convivial_bootstrap_preprocess_paragraph__timeline(&$variables) {
  $entity = $variables['paragraph'];
  $sections = [];
  $view_mode = 'tiny';

  foreach ($entity->get('field_timeline_items')->referencedEntities() as $timeline_item) {
    $date = $timeline_item->get('field_timeline_item_date')->value;
    $prettydate = \Drupal::service('date.formatter')->format(strtotime($date), 'custom', 'j M Y');
    $body = $timeline_item->get('field_timeline_item_body')->view('default');
    $images = $timeline_item->get('field_timeline_item_image')->referencedEntities();

    if (!empty($images)) {
      $image_media = $images[0];
      $image = \Drupal::entityTypeManager()->getViewBuilder('media')->view($image_media, $view_mode);
    }
    else {
      $image = NULL;
    }

    if (array_key_exists($date, $sections)) {
      // We already have a group.
      $section = $sections[$date];
    }
    else {
      // Init this new group.
      $section = [];
      $section['date'] = $prettydate;

      $section['image'] = $image;
      $section['items'] = [];
    }
    $section['items'][] = $body;
    $sections[$date] = $section;
  }
  // Sort from low to high dates.
  ksort($sections);
  $variables['sections'] = array_values($sections);
}

/**
 * Implements template_preprocess_ds_entity_view().
 */
function convivial_bootstrap_preprocess_ds_entity_view(&$variables) {
  // Attach common paragraph features.
  _convivial_bootstrap_attach_paragraph_features($variables['content']['#entity'], $variables['content'], '#attributes');
}

/**
 * Implements template_preprocess_field().
 */
function convivial_bootstrap_preprocess_field(&$variables, $hook) {
  switch ($variables['field_name']) {

    case 'field_body':
      // Attach Glossary feature if enabled.
      if (theme_get_setting('glossary_enable')) {
        require_once __DIR__ . '/includes/glossary.inc';
        _convivial_bootstrap_glossary($variables);
      }

      if ($variables['entity_type'] === 'paragraph') {
        $variables['attributes']['class'][] = 'component__body';
      }
      break;

    case 'field_cb_block':
      require_once __DIR__ . '/includes/block.inc';
      _convivial_bootstrap_block_content($variables);
      break;

    case 'field_event_date':
      // Adapt datetime object for calendar item date formatter.
      if ($variables['element']['#formatter'] === 'calendar_item_date_formatter'
        && !empty($variables['items'][0]['content']['#datetime'])
      ) {
        /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
        $entity = $variables['element']['#object'];
        $field_value = $entity->get('field_event_date')->value;
        // Only if value is available.
        if (!empty($field_value)) {
          $timestamp = strtotime($field_value);
          // Create new date time object using correct timezone.
          $datetime = new DrupalDateTime();
          $datetime->setTimestamp($timestamp + $datetime->getOffset());
          $variables['items'][0]['content']['#datetime'] = $datetime;
        }
      }
      break;

    case 'field_heading':
      // Forward item URL to template. See convivial_bootstrap_preprocess_layout().
      if (!empty($variables['element']['#item_url'])) {
        $variables['item_url'] = $variables['element']['#item_url'];
      }

      if ($variables['entity_type'] === 'paragraph') {
        $variables['attributes']['class'][] = 'component__heading';
      }
      break;

    case 'field_read_more':
      if ($variables['entity_type'] === 'paragraph') {
        $variables['attributes']['class'][] = 'component__cta';
      }
      break;

    case 'field_pb_definition':
      require_once __DIR__ . '/includes/block.inc';
      _convivial_bootstrap_block_plugin($variables);
      break;

    case 'field_social_share_facebook':
    case 'field_social_share_twitter':
    case 'field_social_share_linkedin':
    case 'field_social_share_email':
      require_once __DIR__ . '/includes/social_share.inc';
      _convivial_bootstrap_social_share($variables);
      break;

    case 'field_view_definition':
      require_once __DIR__ . '/includes/view.inc';
      _convivial_bootstrap_view($variables);
      break;

    case 'field_animation_images':
      if ($variables["element"]["#bundle"] === 'animation' && $variables['element']['#object']) {
        $media_ids = [];
        foreach ($variables['items'] as $delta => $item) {
          if (!empty($item['content']['#media'])) {
            /** @var Media $media */
            $media = $item['content']['#media'];
            $media_ids[$delta] = $media->id();
          }
        }
        $variables['media_ids'] = $media_ids;
        $variables['paragraph_id'] = $variables['element']['#object']->id();
      }
      break;
  }
}

/**
 * Implements template_preprocess_field().
 */
function convivial_bootstrap_preprocess_field__paragraph__field_snippet(&$variables) {

  // Get current route match.
  $current_route = \Drupal::routeMatch();
  $route_name = $current_route->getRouteName();

  if ($route_name === 'entity.node.canonical') {
    $content = $variables['items'][0]['content']['#context']['value'];
    $variables['items'][0]['content'] = [
      '#type' => 'processed_text',
      '#text' => $content,
      '#format' => 'unrestricted_text',
    ];
  }
}

/**
 * Implements template_preprocess_field().
 */
function convivial_bootstrap_preprocess_field__paragraph__field_gallery_media(&$variables) {
  $paragraph = $variables['element']['#object'];
  if ($paragraph->hasField('field_gallery_media') && !$paragraph->get('field_gallery_media')->isEmpty()) {
    $media = $paragraph->get('field_gallery_media')->referencedEntities();

    foreach ($media as $index => $media_item) {
      if ($media_item instanceof Media) {
        if ($media_item->hasField('field_media_oembed_video') && !$media_item->get('field_media_oembed_video')->isEmpty()) {
          $media_thumbnail_fid = $media_item->get('thumbnail')->target_id;
          $file = File::load($media_thumbnail_fid);

          // Load the image style.
          $image_style = ImageStyle::load('landscape_hi');

          if ($image_style) {
            // Create the derivative URI.
            $derivative_uri = $image_style->buildUri($file->getFileUri());

            // Check if the derivative file already exists.
            $derivative_exists = file_exists($derivative_uri);

            // Create the derivative file only if it doesn't exist.
            if (!$derivative_exists) {
              $image_style->createDerivative($file->getFileUri(), $derivative_uri);
            }

            // Get the URL for the derivative image.
            $file_uri = $file->getFileUri();
            $variables['thumbnail_url'][$index] = $file_uri;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function convivial_bootstrap_preprocess_calendar_item_date(&$variables) {
  $item = $variables['datetime'];
  if (!empty($item) && $item instanceof DrupalDateTime) {
    $variables['datetime'] = $item->format('Y-m-d');
    $variables['day_textual'] = $item->format('D');
    $variables['day_number'] = $item->format('d');
    $variables['month'] = $item->format('M');
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function convivial_bootstrap_theme_suggestions_form_element_alter(&$suggestions, $variables) {
  array_unshift($suggestions, 'form_element__' . $variables['element']['#type']);
}

/**
 * Implements hook_preprocess_form_element().
 */
function convivial_bootstrap_preprocess_form_element(&$variables) {
  $variables['label']['#__element_type'] = $variables['element']['#type'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function convivial_bootstrap_theme_suggestions_form_element_label_alter(&$suggestions, $variables) {
  $suggestions[] = 'form_element_label__' . $variables['element']['#__element_type'];
}

/**
 * Implements THEMENAME_preprocess_checkboxes().
 */
function convivial_bootstrap_preprocess_checkboxes(&$variables) {
  _convivial_bootstrap_attach_class_is_invalid($variables);
}

/**
 * Implements THEMENAME_preprocess_radios().
 */
function convivial_bootstrap_preprocess_radios(&$variables) {
  _convivial_bootstrap_attach_class_is_invalid($variables);
}

/**
 * Attach class 'is-invalid' to form elements.
 */
function _convivial_bootstrap_attach_class_is_invalid(&$variables) {
  $element = $variables['element'];
  if (isset($element['#errors'])) {
    $variables['attributes']['class'][] = 'is-invalid';
  }
}

/**
 * Maps theme settings to variables usable in twig templates.
 *
 * @param array $variables
 *   Theme variables array.
 * @param array $theme_settings_mappings
 *   An array of mapping.
 */
function _convivial_bootstrap_theme_settings_mappings(array &$variables, array $theme_settings_mappings) {
  foreach ($theme_settings_mappings as $variable => $options) {
    $setting = theme_get_setting($variable);

    if (isset($options[$setting])) {
      $variables[$variable] = $options[$setting];
    }
  }
}

/**
 * Attach paragraph features.
 */
function _convivial_bootstrap_attach_paragraph_features(FieldableEntityInterface $entity, array &$build, $attributes_key) {
  switch ($entity->bundle()) {
    case 'app':
      require_once __DIR__ . '/includes/app.inc';
      _convivial_bootstrap_app($entity, $build, $attributes_key);
      break;

    case 'charts':
      require_once __DIR__ . '/includes/charts.inc';
      _convivial_bootstrap_charts($entity, $build, $attributes_key);
      break;

    case 'map':
      require_once __DIR__ . '/includes/map.inc';
      _convivial_bootstrap_map($entity, $build, $attributes_key);
      break;

    case 'national_map':
      require_once __DIR__ . '/includes/national_map.inc';
      _convivial_bootstrap_national_map($entity, $build, $attributes_key);
      break;
  }
}

/**
 * Get file URL from specific field.
 *
 * @param \Drupal\Core\Entity\FieldableEntityInterface $entity
 *   The entity holding fields.
 * @param string $field_name
 *   The field where file is attached.
 *
 * @return string|null
 *   The file URL or null when empty.
 */
function _convivial_bootstrap_get_file_url(FieldableEntityInterface $entity, $field_name) {
  // Only if entity has this field.
  if ($entity->hasField($field_name)) {
    // Get file ID.
    $target_id = $entity->get($field_name)->target_id;
    if (!empty($target_id)) {
      // Get file URL if available.
      /** @var \Drupal\file\Entity\File $file */
      $file = File::load($target_id);
      if (!empty($file)) {
        return $file->createFileUrl();
      }
    }
  }
  return NULL;
}

/**
 * Get bundles of a given entity type (node by default).
 *
 * @param string $entity_type
 *   Entity type.
 *
 * @return mixed
 *   Array of entity type bundles indexed by machine names.
 */
function _convivial_bootstrap_get_entity_bundles($entity_type = 'node') {
  $bundles = \Drupal::service('entity_type.bundle.info')
    ->getBundleInfo($entity_type);
  foreach ($bundles as $bundle => $properties) {
    $bundles[$bundle] = $properties['label'];
  }
  return $bundles;
}

/**
 * Add `is_active` boolean to menu item that matches given path.
 */
function _convivial_bootstrap_theme_find_active_link(&$links, $path) {
  foreach ($links as &$item) {
    if ($item['url']->toString() === $path) {
      $item['is_active'] = TRUE;
    }
    elseif (!empty($item['below'])) {
      _convivial_bootstrap_theme_find_active_link($item['below'], $path);
    }
  }
}

/**
 * Flush render cache.
 */
function _convivial_bootstrap_flush_render_cache() {
  \Drupal::service('cache.render')->invalidateAll();
}

/**
 * Implementation of hook_preprocess_facets_item_list.
 *
 * @param $variables
 */
function convivial_bootstrap_preprocess_facets_item_list(&$variables) {
  $variables['in_layout_builder_ui'] = _convivial_bootstrap_is_in_layout_builder_ui();
}

/**
 * Check if the current page is in layout builder UI.
 *
 * @return bool
 */
function _convivial_bootstrap_is_in_layout_builder_ui() {
  // Current route match.
  $route = \Drupal::routeMatch();

  // Layout builder UI checker.
  $rountname = $route->getRouteName();

  return strpos($rountname, 'layout_builder') === 0 || strpos($rountname, 'layout') === 0;
}
